getwd()
"specdata" <- "~/FLO/Data/Module 2 - R Programming/Programming assignment 1"
files_full <- list.files("specdata", full.names = TRUE)
data <- data.frame()
for (i in 1:332) {
data <- rbind(data, read.csv(files_full[i]))
}
"specdata" <- "~/FLO/Data/Module 2 - R Programming/Programming assignment 1"
files_full <- list.files("specdata", full.names = TRUE)
data <- data.frame()
for (i in 1:1:332) {
data <- rbind(data, read.csv(files_full[i]))
}
files_full
files_full
setwd("~/FLO/Data/Repos/ProgrammingAssignment2")
getwd()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinv <- function(solve) s <<- solve
getinv <- function() s
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
s <- x$getinv()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
mat <- x$get()
s <- solve(mat, ...)
x$setinv(s)
s
}
makeCacheMatrix(x)
z <- makeCacheMatrix()
z$set(matrix(1:25, 5, 5))
cacheSolve(z)
mat <- matrix(1:25, 5, 5)
z$set(mat)
cacheSolve(mat)
z$get(mat)
z$get(matrix(1:25, 5, 5))
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinv <- function(solve) s <<- solve
getinv <- function() s
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function retrieve the inverse of the function makecacheMatrix.
## We pass a condition that implies that if the matrix have already
## been given and have not changed in any way, that its inverse is
## retrieved from the cache, if not it calculates its inverse.
cacheSolve <- function(x, ...) {
s <- x$getinv()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
mat <- x$get()
s <- solve(mat, ...)
x$setinv(s)
s
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
z <- makeCacheMatrix()
a$set(matrix(1:9,3,3))
z$set(matrix(1:9,3,3))
cacheSolve(z)
